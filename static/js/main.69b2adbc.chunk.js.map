{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card.list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","searchOnChange","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oTAIaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCFKC,G,MAAW,SAACR,GAErB,OAEI,aADA,CACA,OAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAE1B,aADA,CACC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLtBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDHG,G,wDAvDb,aAAc,IAAD,8BACX,gBAkBFC,eAAiB,SAACC,GAKhB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,QACrB,WAAKC,QAAQC,IAAI,EAAKC,WAxBzB,EAAKA,MAAQ,CACThB,SAAU,GACVW,YAAa,IAJN,E,qDAYb,WAAoB,IAAD,OAEjBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEV,SAAUqB,S,oBAa3C,WAAS,IAAD,EAE8BC,KAAKN,MAA/BhB,EAFJ,EAEIA,SAAUW,EAFd,EAEcA,YAEZY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAE9CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAMlD,OACE,sBAAKjC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACGW,YAAY,iBACZC,aAAckB,KAAKd,iBAGtB,cAAC,EAAD,CAAUR,SAAUuB,W,GAnDZI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.69b2adbc.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css'\n\n// implied return \nexport const Card = (props) => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} /> \n        <h2> { props.monster.name } </h2>\n        <p> {props.monster.email} </p>\n    </div>\n)\n\n\n\n\n\n// export const Card = (props) => {\n//     return(\n//         <div>\n//              <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} /> \n//              <h2> { props.monster.name } </h2>\n//              <p> {props.monster.email} </p>\n//         </div>\n//     )\n// }","import React from 'react'\nimport {Card} from '../card/card.component'\n\nimport './card-list.style.css'\n\n\nexport const CardList = (props) => {\n    // console.log(props)\n    return(\n        // CardList will be responsible for all the cards, the CardList container for all the monsters\n        <div className='card-list'>\n            {     \n                props.monsters.map(monster => (\n                //Each child in the list must have a unique key, Each individual card\n                <Card key={monster.id} monster={monster}/>\n                ))\n            }\n        </div>\n    )\n}","import React from 'react'\nimport './search-box.style.css'\n\n\n\n\n// functional component, want to return some html \n\n//Destructing the props\nexport const SearchBox = ( {placeholder, handleChange} ) => (\n    <input \n        className=\"search\"\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}\n    />  \n)","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card.list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\n\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super() // call the constructor on the Component class. Get access to this.state\n    this.state = {\n        monsters: [],\n        searchField: ''\n    }\n\n    // this.searchOnChange = this.searchOnChange.bind(this)\n    // adding the above line allow us to use regular function to call this, older way. Instead of using arrow function\n  }\n\n  // render onto the DOM for the first time, and calls whatever is in the block of code\n  componentDidMount(){\n    // JS native fetch and then use promises\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}))\n  }\n\n  searchOnChange = (e) => {\n    //this.setState is asynchronous, \n    //therefore we add a 2nd arg, anonymous arrow function to log immidately\n    //\"this\" keyword in ES6 arrow function refer to this function scope\n    //if using normal function \"this\" is undefined, because \"this\" in very top level scope. unless we apply bind(this) in the constructor. older way.\n    this.setState({\n      searchField: e.target.value\n    }, ()=>{console.log(this.state)})\n  }\n\n  render(){\n\n      const { monsters, searchField } = this.state // Using Destructing\n      //Create a new array of filter Monster\n      const filteredMonsters = monsters.filter(monster => \n        //implied return without using curly () => {return ....}\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n        // when input change, cause state to update, cause the componenet to rerender.\n        // rerender the filterMonsters, and pass to CardList\n      \n      return(\n        <div className='App'>\n          <h1>Monsters Rolodex</h1>\n          <SearchBox \n             placeholder='search monster' \n             handleChange={this.searchOnChange}\n            //  handleChange={e => this.setState( {searchField: e.target.value} )}\n          />\n          <CardList monsters={filteredMonsters} /> \n        </div>\n      )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}